function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var Util = /*#__PURE__*/ function() {
    "use strict";
    function Util() {
        _class_call_check(this, Util);
    }
    _create_class(Util, [
        {
            key: "forEach",
            value: function forEach(elements, handler) {
                elements = elements || [];
                for(var i = 0; i < elements.length; i++){
                    if (elements[i] != null) {
                        handler(elements[i]);
                    }
                }
            }
        },
        {
            key: "getScrollTop",
            value: function getScrollTop() {
                return document.documentElement && document.documentElement.scrollTop || document.body.scrollTop;
            }
        },
        {
            key: "isMobile",
            value: function isMobile() {
                return window.matchMedia("only screen and (max-width: 680px)").matches;
            }
        },
        {
            key: "isTocStatic",
            value: function isTocStatic() {
                return window.matchMedia("only screen and (max-width: 960px)").matches;
            }
        }
    ]);
    return Util;
}();
var Theme = /*#__PURE__*/ function() {
    "use strict";
    function Theme() {
        _class_call_check(this, Theme);
        this.config = window.config;
        this.data = this.config.data;
        this.isDark = document.body.getAttribute("theme") === "dark";
        this.util = new Util();
        this.newScrollTop = this.util.getScrollTop();
        this.oldScrollTop = this.newScrollTop;
        this.scrollEventSet = new Set();
        this.resizeEventSet = new Set();
        this.switchThemeEventSet = new Set();
        this.clickMaskEventSet = new Set();
        this.menuToggleMobileEventListener = false;
        if (window.objectFitImages) objectFitImages();
    }
    _create_class(Theme, [
        {
            key: "initMenuMobile",
            value: function initMenuMobile() {
                var menuToggleMobile = document.getElementById("menu-toggle-mobile");
                var menuMobile = document.getElementById("menu-mobile");
                // If no event listener has been registered yet, add one.
                if (!this.menuToggleMobileEventListener) {
                    menuToggleMobile.addEventListener("click", function() {
                        document.body.classList.toggle("blur");
                        menuToggleMobile.classList.toggle("active");
                        menuMobile.classList.toggle("active");
                    });
                    this.menuToggleMobileEventListener = true;
                }
                // Remove the mask when click on it.
                this._menuMobileOnClickMask = function() {
                    menuToggleMobile.classList.remove("active");
                    menuMobile.classList.remove("active");
                };
                this.clickMaskEventSet.add(this._menuMobileOnClickMask);
            }
        },
        {
            key: "initSwitchTheme",
            value: function initSwitchTheme() {
                var _this = this;
                this.util.forEach(document.getElementsByClassName("theme-switch"), function($themeSwitch) {
                    $themeSwitch.addEventListener("click", function() {
                        if (document.body.getAttribute("theme") === "dark") document.body.setAttribute("theme", "light");
                        else document.body.setAttribute("theme", "dark");
                        _this.isDark = !_this.isDark;
                        window.localStorage && localStorage.setItem("theme", _this.isDark ? "dark" : "light");
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = _this.switchThemeEventSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var event = _step.value;
                                event();
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }, false);
                });
            }
        },
        {
            key: "initSearch",
            value: function initSearch() {
                var _this = this;
                var searchConfig = this.config.search;
                var isMobile = this.util.isMobile();
                if (!searchConfig || isMobile && this._searchMobileOnce || !isMobile && this._searchDesktopOnce) return;
                // Initialize default search config
                var maxResultLength = searchConfig.maxResultLength ? searchConfig.maxResultLength : 10;
                var highlightTag = searchConfig.highlightTag ? searchConfig.highlightTag : "em";
                var isCaseSensitive = searchConfig.isCaseSensitive ? searchConfig.isCaseSensitive : false;
                var minMatchCharLength = searchConfig.minMatchCharLength ? searchConfig.minMatchCharLength : 1;
                var findAllMatches = searchConfig.findAllMatches ? searchConfig.findAllMatches : false;
                var location = searchConfig.location ? searchConfig.location : 0;
                var threshold = searchConfig.threshold ? searchConfig.threshold : 0.3;
                var distance = searchConfig.distance ? searchConfig.distance : 100;
                var ignoreLocation = searchConfig.ignoreLocation ? searchConfig.ignoreLocation : false;
                var useExtendedSearch = searchConfig.useExtendedSearch ? searchConfig.useExtendedSearch : false;
                var ignoreFieldNorm = searchConfig.ignoreFieldNorm ? searchConfig.ignoreFieldNorm : false;
                var suffix = isMobile ? "mobile" : "desktop";
                var header = document.getElementById("header-".concat(suffix));
                var searchInput = document.getElementById("search-input-".concat(suffix));
                var searchToggle = document.getElementById("search-toggle-".concat(suffix));
                var searchLoading = document.getElementById("search-loading-".concat(suffix));
                var searchClear = document.getElementById("search-clear-".concat(suffix));
                if (isMobile) {
                    this._searchMobileOnce = true;
                    // Turn on the mask when clicking on the search button
                    searchInput.addEventListener("focus", function() {
                        document.body.classList.add("blur");
                        header.classList.add("open");
                        console.log("focus");
                    });
                    // Turn off the everything when clicking on the cancel button
                    document.getElementById("search-cancel-mobile").addEventListener("click", function() {
                        header.classList.remove("open");
                        document.body.classList.remove("blur");
                        document.getElementById("menu-toggle-mobile").classList.remove("active");
                        document.getElementById("menu-mobile").classList.remove("active");
                        searchLoading.style.display = "none";
                        searchClear.style.display = "none";
                        _this._searchMobile && _this._searchMobile.autocomplete.setVal("");
                    });
                    // Clear the search box when clicking on the clear button
                    searchClear.addEventListener("click", function() {
                        searchClear.style.display = "none";
                        _this._searchMobile && _this._searchMobile.autocomplete.setVal("");
                    }, false);
                    // Remove the mask when click on it or pjax:send
                    this._searchMobileOnClickMask = function() {
                        header.classList.remove("open");
                        searchLoading.style.display = "none";
                        searchClear.style.display = "none";
                        _this._searchMobile && _this._searchMobile.autocomplete.setVal("");
                    };
                    this.clickMaskEventSet.add(this._searchMobileOnClickMask);
                } else {
                    this._searchDesktopOnce = true;
                    // Turn on the mask when clicking on the search button
                    searchToggle.addEventListener("click", function() {
                        document.body.classList.add("blur");
                        header.classList.add("open");
                        searchInput.focus();
                    });
                    // Clear the search box when clicking on the clear button
                    searchClear.addEventListener("click", function() {
                        searchClear.style.display = "none";
                        _this._searchDesktop && _this._searchDesktop.autocomplete.setVal("");
                    });
                    // Toggle search when Ctrl + K is pressed
                    document.addEventListener("keydown", function(e) {
                        if (e.ctrlKey && e.code === "KeyK") {
                            e.preventDefault();
                            searchToggle.click();
                        }
                    });
                    // Remove the mask when click on it or pjax:send
                    this._searchDesktopOnClickMask = function() {
                        header.classList.remove("open");
                        searchLoading.style.display = "none";
                        searchClear.style.display = "none";
                        _this._searchDesktop && _this._searchDesktop.autocomplete.setVal("");
                    };
                    this.clickMaskEventSet.add(this._searchDesktopOnClickMask);
                }
                // Display the clear button only when the search box is not empty
                searchInput.addEventListener("input", function() {
                    if (searchInput.value === "") searchClear.style.display = "none";
                    else searchClear.style.display = "inline";
                });
                var initAutosearch = function() {
                    var autosearch = autocomplete("#search-input-".concat(suffix), {
                        hint: false,
                        autoselect: true,
                        dropdownMenuContainer: "#search-dropdown-".concat(suffix),
                        clearOnSelected: true,
                        cssClasses: {
                            noPrefix: true
                        },
                        debug: false
                    }, {
                        name: "search",
                        source: function(query, callback) {
                            searchLoading.style.display = "inline";
                            searchClear.style.display = "none";
                            var finish = function(results) {
                                searchLoading.style.display = "none";
                                searchClear.style.display = "inline";
                                callback(results);
                            };
                            var search = function() {
                                var results = {};
                                window._index.search(query).forEach(function(param) {
                                    var item = param.item, refIndex = param.refIndex, matches = param.matches;
                                    var title = item.title;
                                    var content = item.content;
                                    matches.forEach(function(param) {
                                        var indices = param.indices, value = param.value, key = param.key;
                                        if (key === "content") {
                                            var offset = 0;
                                            for(var i = 0; i < indices.length; i++){
                                                var substr = content.substring(indices[i][0] + offset, indices[i][1] + 1 + offset);
                                                var tag = "<".concat(highlightTag, ">") + substr + "</".concat(highlightTag, ">");
                                                content = content.substring(0, indices[i][0] + offset) + tag + content.substring(indices[i][1] + 1 + offset, content.length);
                                                offset += highlightTag.length * 2 + 5;
                                            }
                                        } else if (key === "title") {
                                            var offset1 = 0;
                                            for(var i1 = 0; i1 < indices.length; i1++){
                                                var substr1 = title.substring(indices[i1][0] + offset1, indices[i1][1] + 1 + offset1);
                                                var tag1 = "<".concat(highlightTag, ">") + substr1 + "</".concat(highlightTag, ">");
                                                title = title.substring(0, indices[i1][0] + offset1) + tag1 + title.substring(indices[i1][1] + 1 + offset1, content.length);
                                                offset1 += highlightTag.length * 2 + 5;
                                            }
                                        }
                                    });
                                    results[item.uri] = {
                                        uri: item.uri,
                                        title: title,
                                        date: item.date,
                                        context: content
                                    };
                                });
                                return Object.values(results).slice(0, maxResultLength);
                            };
                            if (!window._index) {
                                fetch(searchConfig.fuseIndexURL).then(function(response) {
                                    return response.json();
                                }).then(function(data) {
                                    var options = {
                                        isCaseSensitive: isCaseSensitive,
                                        findAllMatches: findAllMatches,
                                        minMatchCharLength: minMatchCharLength,
                                        location: location,
                                        threshold: threshold,
                                        distance: distance,
                                        ignoreLocation: ignoreLocation,
                                        useExtendedSearch: useExtendedSearch,
                                        ignoreFieldNorm: ignoreFieldNorm,
                                        includeScore: false,
                                        shouldSort: true,
                                        includeMatches: true,
                                        keys: [
                                            "content",
                                            "title"
                                        ]
                                    };
                                    window._index = new Fuse(data, options);
                                    finish(search());
                                }).catch(function(err) {
                                    console.error(err);
                                    finish([]);
                                });
                            } else finish(search());
                        },
                        templates: {
                            suggestion: function(param) {
                                var title = param.title, date = param.date, context = param.context;
                                return '<div><span class="suggestion-title">'.concat(title, '</span><span class="suggestion-date">').concat(date, '</span></div><div class="suggestion-context">').concat(context, "</div>");
                            },
                            empty: function(param) {
                                var query = param.query;
                                return '<div class="search-empty">'.concat(searchConfig.noResultsFound, ': <span class="search-query">"').concat(query, '"</span></div>');
                            },
                            footer: function() {
                                var _ref = {
                                    searchType: "Fuse.js",
                                    icon: "",
                                    href: "https://fusejs.io/"
                                }, searchType = _ref.searchType, icon = _ref.icon, href = _ref.href;
                                return '<div class="search-footer">Search by <a href="'.concat(href, '" rel="noopener noreffer" target="_blank">').concat(icon, " ").concat(searchType, "</a></div>");
                            }
                        }
                    });
                    autosearch.on("autocomplete:selected", function(_event, suggestion, _dataset, _context) {
                        window.location.assign(suggestion.uri);
                    });
                    if (isMobile) _this._searchMobile = autosearch;
                    else _this._searchDesktop = autosearch;
                };
                initAutosearch();
            }
        },
        {
            key: "initDetails",
            value: function initDetails() {
                this.util.forEach(document.getElementsByClassName("details"), function($details) {
                    var $summary = $details.getElementsByClassName("details-summary")[0];
                    $summary.addEventListener("click", function() {
                        $details.classList.toggle("open");
                    }, false);
                });
            }
        },
        {
            key: "initLightGallery",
            value: function initLightGallery() {
                if (this.config.lightGallery) lightGallery(document.getElementById("content"), this.config.lightGallery);
            }
        },
        {
            key: "initHighlight",
            value: function initHighlight() {
                var _this = this;
                this.util.forEach(document.querySelectorAll(".highlight > pre.chroma"), function($preChroma) {
                    var $chroma = document.createElement("div");
                    $chroma.className = $preChroma.className;
                    var $table = document.createElement("table");
                    $chroma.appendChild($table);
                    var $tbody = document.createElement("tbody");
                    $table.appendChild($tbody);
                    var $tr = document.createElement("tr");
                    $tbody.appendChild($tr);
                    var $td = document.createElement("td");
                    $tr.appendChild($td);
                    $preChroma.parentElement.replaceChild($chroma, $preChroma);
                    $td.appendChild($preChroma);
                });
                this.util.forEach(document.querySelectorAll(".highlight > .chroma"), function($chroma) {
                    var $codeElements = $chroma.querySelectorAll("pre.chroma > code");
                    if ($codeElements.length) {
                        var $code = $codeElements[$codeElements.length - 1];
                        var header = document.createElement("div");
                        header.className = "code-header " + $code.className.toLowerCase();
                        var $title = document.createElement("span");
                        $title.classList.add("code-title");
                        $title.insertAdjacentHTML("afterbegin", '<i class="icon-angle-circled-right"></i>');
                        $title.addEventListener("click", function() {
                            $chroma.classList.toggle("open");
                        }, false);
                        header.appendChild($title);
                        var $ellipses = document.createElement("span");
                        $ellipses.insertAdjacentHTML("afterbegin", '<i class="icon-ellipsis"></i>');
                        $ellipses.classList.add("ellipses");
                        $ellipses.addEventListener("click", function() {
                            $chroma.classList.add("open");
                        }, false);
                        header.appendChild($ellipses);
                        var $copy = document.createElement("span");
                        $copy.insertAdjacentHTML("afterbegin", '<i class="icon-copy"></i>');
                        $copy.classList.add("copy");
                        var code = $code.innerText;
                        if (_this.config.code.maxShownLines < 0 || code.split("\n").length < _this.config.code.maxShownLines + 2) $chroma.classList.add("open");
                        if (_this.config.code.copyTitle) {
                            $copy.setAttribute("data-clipboard-text", code);
                            $copy.title = _this.config.code.copyTitle;
                            var clipboard = new ClipboardJS($copy);
                            header.appendChild($copy);
                        }
                        $chroma.insertBefore(header, $chroma.firstChild);
                    }
                });
            }
        },
        {
            key: "initToc",
            value: function initToc() {
                var _this = this;
                var $tocCore = document.getElementById("TableOfContents");
                if ($tocCore === null) return;
                if (document.getElementById("toc-static").getAttribute("kept") || this.util.isTocStatic()) {
                    var $tocContentStatic = document.getElementById("toc-content-static");
                    if ($tocCore.parentElement !== $tocContentStatic) {
                        $tocCore.parentElement.removeChild($tocCore);
                        $tocContentStatic.appendChild($tocCore);
                    }
                    if (this._tocOnScroll) this.scrollEventSet.delete(this._tocOnScroll);
                } else {
                    var $tocContentAuto = document.getElementById("toc-content-auto");
                    if ($tocCore.parentElement !== $tocContentAuto) {
                        $tocCore.parentElement.removeChild($tocCore);
                        $tocContentAuto.appendChild($tocCore);
                    }
                    var $toc = document.getElementById("toc-auto");
                    var $page = document.getElementsByClassName("page")[0];
                    var rect = $page.getBoundingClientRect();
                    $toc.style.left = "".concat(rect.left + rect.width + 20, "px");
                    $toc.style.maxWidth = "".concat($page.getBoundingClientRect().left - 10, "px");
                    $toc.style.visibility = "visible";
                    var $tocLinkElements = $tocCore.querySelectorAll("a:first-child");
                    var $tocLiElements = $tocCore.getElementsByTagName("li");
                    var headerLinkElements = document.getElementsByClassName("headerLink");
                    var headerIsFixed = document.body.getAttribute("header-desktop") !== "normal";
                    var headerHeight = document.getElementById("header-desktop").offsetHeight;
                    var TOP_SPACING = 20 + (headerIsFixed ? headerHeight : 0);
                    var minTocTop = $toc.offsetTop;
                    var minScrollTop = minTocTop - TOP_SPACING + (headerIsFixed ? 0 : headerHeight);
                    this._tocOnScroll = this._tocOnScroll || function() {
                        var footerTop = document.getElementById("post-footer").offsetTop;
                        var maxTocTop = footerTop - $toc.getBoundingClientRect().height;
                        var maxScrollTop = maxTocTop - TOP_SPACING + (headerIsFixed ? 0 : headerHeight);
                        if (_this.newScrollTop < minScrollTop) {
                            $toc.style.position = "absolute";
                            $toc.style.top = "".concat(minTocTop, "px");
                        } else if (_this.newScrollTop > maxScrollTop) {
                            $toc.style.position = "absolute";
                            $toc.style.top = "".concat(maxTocTop, "px");
                        } else {
                            $toc.style.position = "fixed";
                            $toc.style.top = "".concat(TOP_SPACING, "px");
                        }
                        _this.util.forEach($tocLinkElements, function($tocLink) {
                            $tocLink.classList.remove("active");
                        });
                        _this.util.forEach($tocLiElements, function($tocLi) {
                            $tocLi.classList.remove("has-active");
                        });
                        var INDEX_SPACING = 20 + (headerIsFixed ? headerHeight : 0);
                        var activeTocIndex = headerLinkElements.length - 1;
                        for(var i = 0; i < headerLinkElements.length - 1; i++){
                            var thisTop = headerLinkElements[i].getBoundingClientRect().top;
                            var nextTop = headerLinkElements[i + 1].getBoundingClientRect().top;
                            if (i == 0 && thisTop > INDEX_SPACING || thisTop <= INDEX_SPACING && nextTop > INDEX_SPACING) {
                                activeTocIndex = i;
                                break;
                            }
                        }
                        if (activeTocIndex !== -1) {
                            $tocLinkElements[activeTocIndex].classList.add("active");
                            var $parent = $tocLinkElements[activeTocIndex].parentElement;
                            while($parent !== $tocCore){
                                $parent.classList.add("has-active");
                                $parent = $parent.parentElement.parentElement;
                            }
                        }
                    };
                    this._tocOnScroll();
                    this.scrollEventSet.add(this._tocOnScroll);
                }
            }
        },
        {
            key: "initMermaid",
            value: function initMermaid() {
                var _this = this;
                var $mermaidElements = document.getElementsByClassName("mermaid");
                if ($mermaidElements.length) {
                    mermaid.initialize({
                        startOnLoad: false,
                        theme: "null"
                    });
                    this.util.forEach($mermaidElements, function($mermaid) {
                        mermaid.mermaidAPI.render("svg-" + $mermaid.id, _this.data[$mermaid.id], function(svgCode) {
                            $mermaid.insertAdjacentHTML("afterbegin", svgCode);
                        }, $mermaid);
                    });
                }
            }
        },
        {
            key: "initComment",
            value: function initComment() {
                var _this = this;
                if (this.config.comment) {
                    if (this.config.comment.giscus) {
                        var giscusConfig = this.config.comment.giscus;
                        var script = document.createElement("script");
                        script.src = "https://giscus.app/client.js";
                        script.type = "text/javascript";
                        script.setAttribute("data-repo", giscusConfig.repo);
                        script.setAttribute("data-repo-id", giscusConfig.repoid);
                        script.setAttribute("data-category", giscusConfig.category);
                        script.setAttribute("data-category-id", giscusConfig.categoryid);
                        script.setAttribute("data-mapping", giscusConfig.mapping);
                        script.setAttribute("data-reactions-enabled", "1");
                        script.setAttribute("data-emit-metadata", "0");
                        script.setAttribute("data-lang", "zh-CN");
                        script.setAttribute("data-theme", this.isDark ? "dark" : "light");
                        script.crossOrigin = "anonymous";
                        script.async = true;
                        document.getElementById("giscus").appendChild(script);
                        this._giscusOnSwitchTheme = this._giscusOnSwitchTheme || function() {
                            var message = {
                                setConfig: {
                                    theme: _this.isDark ? "dark" : "light"
                                }
                            };
                            var iframe = document.querySelector("iframe.giscus-frame");
                            if (!iframe) return;
                            iframe.contentWindow.postMessage({
                                giscus: message
                            }, "https://giscus.app");
                        };
                        this.switchThemeEventSet.add(this._giscusOnSwitchTheme);
                    }
                }
            }
        },
        {
            key: "initSmoothScroll",
            value: function initSmoothScroll() {
                if (SmoothScroll) new SmoothScroll('[href^="#"]', {
                    speed: 300,
                    speedAsDuration: true,
                    header: "#header-desktop"
                });
            }
        },
        {
            key: "onScroll",
            value: function onScroll() {
                var _this = this;
                var headers = [];
                if (document.body.getAttribute("header-desktop") === "auto") headers.push(document.getElementById("header-desktop"));
                if (document.body.getAttribute("header-mobile") === "auto") headers.push(document.getElementById("header-mobile"));
                if (document.getElementById("comments")) {
                    var $viewComments = document.getElementById("view-comments");
                    $viewComments.href = "#comments";
                    $viewComments.style.display = "block";
                }
                var $fixedButtons = document.getElementById("fixed-buttons");
                var ACCURACY = 20, MINIMUM = 100;
                window.addEventListener("scroll", function() {
                    _this.newScrollTop = _this.util.getScrollTop();
                    var scroll = _this.newScrollTop - _this.oldScrollTop;
                    var isMobile = _this.util.isMobile();
                    _this.util.forEach(headers, function(header) {
                        if (scroll > ACCURACY) {
                            header.classList.remove("fadeInDown");
                        } else if (scroll < -ACCURACY) {
                            header.classList.remove("fadeOutUp");
                        }
                    });
                    if (_this.newScrollTop > MINIMUM) {
                        if (isMobile && scroll > ACCURACY) {
                            $fixedButtons.classList.remove("fadeIn");
                        } else if (!isMobile || scroll < -ACCURACY) {
                            $fixedButtons.style.display = "block";
                            $fixedButtons.classList.remove("fadeOut");
                        }
                    } else {
                        if (!isMobile) {
                            $fixedButtons.classList.remove("fadeIn");
                        }
                        $fixedButtons.style.display = "none";
                    }
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = _this.scrollEventSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var event = _step.value;
                            event();
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    _this.oldScrollTop = _this.newScrollTop;
                }, false);
            }
        },
        {
            key: "onResize",
            value: function onResize() {
                var _this = this;
                window.addEventListener("resize", function() {
                    if (!_this._resizeTimeout) {
                        _this._resizeTimeout = window.setTimeout(function() {
                            _this._resizeTimeout = null;
                            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            try {
                                for(var _iterator = _this.resizeEventSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                    var event = _step.value;
                                    event();
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                            _this.initToc();
                            _this.initMermaid();
                            _this.initSearch();
                        }, 100);
                    }
                }, false);
            }
        },
        {
            key: "onClickMask",
            value: function onClickMask() {
                var _this = this;
                document.getElementById("mask").addEventListener("click", function() {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = _this.clickMaskEventSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var event = _step.value;
                            event();
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    document.body.classList.remove("blur");
                }, false);
            }
        },
        {
            key: "removeElementsByClass",
            value: function removeElementsByClass(className) {
                var elements = document.getElementsByClassName(className);
                while(elements.length > 0){
                    elements[0].parentNode.removeChild(elements[0]);
                }
            }
        },
        {
            key: "checkMobile",
            value: function checkMobile() {
                if (this.util.isMobile()) {
                    this.removeElementsByClass("desktop");
                    this.initMenuMobile();
                } else {
                    this.removeElementsByClass("mobile");
                }
            }
        },
        {
            key: "init",
            value: function init() {
                var _this = this;
                try {
                    this.checkMobile();
                    this.initSwitchTheme();
                } catch (err) {
                    console.error(err);
                }
                window.setTimeout(function() {
                    _this.initHighlight();
                    _this.initDetails();
                    _this.initSmoothScroll();
                    _this.initToc();
                    _this.onScroll();
                    _this.onResize();
                    _this.onClickMask();
                }, 100);
                window.setTimeout(function() {
                    _this.initSearch();
                    _this.initMermaid();
                    _this.initLightGallery();
                }, 500);
                window.setTimeout(function() {
                    _this.initComment();
                }, 1000);
            }
        }
    ]);
    return Theme;
}();
var themeInit = function() {
    var theme = new Theme();
    theme.init();
};
if (document.readyState !== "loading") {
    themeInit();
} else {
    document.addEventListener("DOMContentLoaded", themeInit, false);
}


//# sourceMappingURL=theme.min.js.map